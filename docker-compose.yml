version: "3.9"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:6.1.1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka1:
    image: confluentinc/cp-kafka:6.1.1
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
    expose:
      - '29092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_PORT: 9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '3'
      KAFKA_MIN_INSYNC_REPLICAS: '2'

  kafka2:
    image: confluentinc/cp-kafka:6.1.1
    depends_on:
      - zookeeper
    ports:
      - '9093:9093'
    expose:
      - '29093'
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:29093,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_PORT: 9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '3'
      KAFKA_MIN_INSYNC_REPLICAS: '2'

  kafka3:
    image: confluentinc/cp-kafka:6.1.1
    depends_on:
      - zookeeper
    ports:
      - '9094:9094'
    expose:
      - '29094'
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:29094,PLAINTEXT_HOST://localhost:9094
      KAFKA_LISTENER_PORT: 9094
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '3'
      KAFKA_MIN_INSYNC_REPLICAS: '2'

  init-kafka:
    image: confluentinc/cp-kafka:6.1.1
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka1:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka1:29092 --create --if-not-exists --topic game-connections --replication-factor 3 --partitions 3

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka1:29092 --list
      "



  eureka-server:
    restart: always
    build: ./eureka-server/
    depends_on:
      - config-server
    ports:
      - "8761:8761"
    environment:
      - "EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka"
      - "CONFIG_SERVER_URL=http://config-server:8090"


  personal-account:
    ports:
      - "8083:8083"
    environment:
      POSTGRES_DB: postgres
      POSTGRES_HOST: db-personal-account
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: KfvYuJQ8
      EUREKA_SERVER_URL: http://eureka-server:8761/eureka/
      CONFIG_SERVER_URL: http://config-server:8090
    depends_on:
      - eureka-server
      - db-personal-account
      - config-server

    build:
      dockerfile: ./personal-account/Dockerfile

  auth-service:
    ports:
      - "8081:8081"
    environment:
      POSTGRES_DB: postgres
      POSTGRES_HOST: db-auth-service
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: KfvYuJQ8
      EUREKA_SERVER_URL: http://eureka-server:8761/eureka/
      CONFIG_SERVER_URL: http://config-server:8090
    depends_on:
      - eureka-server
      - db-auth-service
      - config-server
    build:
      dockerfile: ./auth-service/Dockerfile

  game-handler:
    ports:
      - "8082:8082"
    environment:
      EUREKA_SERVER_URL: http://eureka-server:8761/eureka/
      CONFIG_SERVER_URL: http://config-server:8090
    depends_on:
      - eureka-server
      - config-server
    build:
      dockerfile: ./game-handler/Dockerfile

  room-service:
    ports:
      - "8084:8084"
    environment:
      POSTGRES_DB: postgres
      POSTGRES_HOST: db-room-service
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: KfvYuJQ8
      EUREKA_SERVER_URL: http://eureka-server:8761/eureka/
      CONFIG_SERVER_URL: http://config-server:8090
    depends_on:
      - eureka-server
      - db-room-service
      - config-server
    build:
      dockerfile: ./room-service/Dockerfile

  gateway-server:
    ports:
      - "8085:8085"
    depends_on:
      - eureka-server
      - config-server
    environment:
      EUREKA_SERVER_URL: http://eureka-server:8761/eureka/
      CONFIG_SERVER_URL: http://config-server:8090
    build:
      dockerfile: ./gateway-server/Dockerfile

  config-server:
    ports:
      - "8090:8090"
    build:
      dockerfile: ./config-server/Dockerfile

  db-auth-service:
    image: postgres:15.2
    ports:
      - "5432:5432"
    expose:
      - 5432
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: KfvYuJQ8
    deploy:
      restart_policy:
        condition: on-failure

  db-personal-account:
    image: postgres:15.2
    ports:
      - "5434:5432"
    expose:
      - 5434
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: KfvYuJQ8
    deploy:
      restart_policy:
        condition: on-failure

  db-room-service:
    image: postgres:15.2
    ports:
      - "5435:5432"
    expose:
      - 5435
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: KfvYuJQ8
    deploy:
      restart_policy:
        condition: on-failure

  frontend:
    build: ./stomp-client/
    ports:
      - "80:3000"

  avatars-service:
    build:
      dockerfile: ./avatars-service/Dockerfile
    ports:
      - "8086:8086"
    depends_on:
      - eureka-server
      - config-server
    environment:
      EUREKA_SERVER_URL: http://eureka-server:8761/eureka/
      CONFIG_SERVER_URL: http://config-server:8090
    env_file:
      - .env.secrets
    restart: always